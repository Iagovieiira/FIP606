---
title: "Importação, visualização e criação de subconjuntos"
format: html
editor: visual
editor_options: 
chunk_output_type: inline
warning: false
message: false 
---

Durante a aula 3, serão apresentadas ferramentas para se realizar uma análise descritiva do conjunto de dados. Além disso, o pacote **`tidyverse`** será utilizado para manipulação, criação de subconjuntos e organização dos dados.

## **Importando dados**

Para importação de um conjunto de dados .csv na web.os dados utlizados serão importados de um arquivo .csv disponível em nuvem. Entretanto, o arquivo traz valores de incidência e severidade da ferrugem do cafeeiro em diferentes regiões da Etiópia, de acordo com o sistema de cultivo, manejo da fazenda, sombreamento, cultivar...

```{r}


library(tidyverse)
cr <- read_csv("https://raw.githubusercontent.com/emdelponte/paper-coffee-rust-Ethiopia/master/data/survey_clean.csv")

  
# Mostrar as variaveis dos dados importados 
glimpse(cr)

# Distribuição da doença (severidade: quanto de doença tenho em cada folha) e incidencia: Proporção de ausencia e presença da doença seja em folhas ou em plantas



## como esta destribuida a incidencia da doença nas fazendas (criar um histograma)

cr |> 
  
  ggplot(aes(x = inc))+
  geom_histogram()

summary(cr$inc)

# Neste caso é multimodal (vairios picos nesse caso antes de 50%)
#No histograma gerado, é possível notar que os valores de incidência apresentam três picos (ou seja, são valores de incidência com maior frequência). Além disso, a incidência aparenta não seguir distribuição normal, uma vez que o histograma apresenta um deslocamento à esquerda.


```

## Sumarização dos dados

usando as funções "group_bay" e "summary":

```{r}
 summary(cr$inc)
 
 #mediana é o valor central 
 
```

## Sumarização dos dados

-   É possível criar histogramas por algum critério, por exemplo, as regiões. Para isso, será utilizada a função **`facet_wrap`** e a função `summarize` que serve para resumir ou agregar dados, calculando estatísticas como médias, medianas, desvios padrão, contagens, entre outros, com base em grupos definidos.

```{r}
#Agrupamento por região
cr |> 
  ggplot(aes(x = inc))+
  geom_boxplot()+
  facet_wrap(~region)
```

```{r}

#MÉDIA: A média é uma medida de tendência central que representa o valor típico de um conjunto de dados. 

cr |> 
group_by(region) |> 
  summarize(inc_mean = mean(inc))
```

```{r}
#Média, mediana, cultivar da região 
cr |> 
group_by(region) |> 
  summarise(inc_med= median (inc), inc_mean = mean(inc), sd_mean = sd(inc)) 
```

```{r}
cr |> 
  ggplot(aes (inc, sev2))+
  geom_point()

#No gráfico gerado é possível observar que há alta correlação positiva entre as variáveis severidade e incidência.
```

```{r}
cr |> 
  ggplot(aes(x = inc))+
  geom_histogram()+
  facet_wrap(~region)

# neste caso a mediana e média são mais distantes 

```

```{r}
cr |> 
  summarise(sev_med= median (sev2),
            sev_mean = mean(sev2),
            sd_mean = sd(sev2)) 

# o que prova que a mediana e a média são mais distates 
```

### **Análise da severidade**

-   Serão realizadas análises de severidade em função da região e da cultivar. Será utilizada a função `group_by.`

```{r}
# por cultivar 
cr |> 
group_by(cultivar) |> 
  summarise(sev_med= median (sev2),
            sev_mean = mean(sev2),
            sd_mean = sd(sev2)) 

```

```{r}
cr |> 
group_by(cultivar) |> 
  summarise(sev_med= median (sev2),
            sev_mean = mean(sev2),
            sd_mean = sd(sev2)) 


```

#### **Severidade por região e cultivar**

Agora, será gerado um histograma da severidade em função de duas variáveis independentes, a região e a cultivar. Nesse caso, será utlilizada a função `facet_grid`:

```{r}
cr |> 
  ggplot(aes(x = sev2, fill = region))+
  geom_histogram()+
  facet_grid(region ~ cultivar)

```

### **Visualizando os dados do conjunto**

O pacote `ggthemes` no R é uma extensão do `ggplot2` que oferece uma ampla variedade de temas e estilos para personalizar gráficos.

```{r}
library(ggthemes)
cr |> 
  ggplot(aes(x = sev2, fill = region))+
  geom_histogram()+
  facet_grid(region ~ cultivar)+
  scale_fill_colorblind()
```

```{r}
cr |> 
  ggplot(aes(x = sev2, fill = region))+
  geom_histogram(color = "black")+
  facet_grid(region ~ cultivar)+
  scale_fill_manual(values = c("white", "blue"))+
  theme_minimal(base_size = 12)+
  theme(legend.position = "bottom")+
  labs(y = "frequency",
       x = "severity (%)", fill = "region")

#É possível notar que com a função facet_grid, o plot se torna mais harmônico.
```

## **Criando subconjuntos**

Para criação de subconjuntos, serão utilizadas duas funções: `select` e `filter` :

```{r}
# filtra Oromia

cr_oromia <- cr |> 
  select (farm, region, cultivar, sev2) |> 
  filter(region == "Oromia")

cr_oromia

# filtra SNNPR
cr_pr <- cr |> 
  select (farm, region, cultivar, sev2) |> 
  filter(region == "SNNPR")

cr_pr

```

### **Visualizando os subconjuntos graficamente:**

```{r}
p1 <- cr_oromia |> 
  ggplot(aes(cultivar,sev2, fill = cultivar))+ 
  geom_boxplot()+
  labs(x = "", y= "Severity (%)") +
  coord_flip()


p2 <- cr_pr |>  
  ggplot(aes(cultivar,sev2, fill = cultivar))+ 
  geom_boxplot()+
  labs(x= "", y= "Severity(%)") +
coord_flip()

#Também é possível inverter o modo como o boxplot é plotado, utilizando a função coord_flip
```

### Para juntar gráficos em diferentes posicionamentos:

Utliza-se o pacote `patchwork` uma ferramenta robusta para unir múltiplos gráficos gerados com `ggplot2` em uma única disposição. Ele simplifica a elaboração de layouts complexos e personalizados, possibilitando a combinação de gráficos lado a lado, sobrepostos ou em matrizes.

```{r}
library(patchwork)
# Ao lado
p1 + p2
# Acima 
p1 / p2

# Retirar a legenda duplicada
(p1 + p2) +
  plot_layout(guides = "collect")

# Atribuir letras a cada gráfico
(p1 / p2) +
  plot_layout(guides = "collect", axes= "collect") +
  plot_annotation(title = "Coffe rust Ethiopia", 
                  caption = "source: vieira (2022)",
    tag_levels = "A")


p3 <- cr_oromia |> 
  ggplot(aes(x = sev2))+
  geom_histogram()

p1 + inset_element(p3, left = 0.6, bottom = 0.6, right = 1, top = 1)
```

Para o salvar o gráfico criado:

```{r}
ggsave("patch1.png", width = 5, height = 4)
```
