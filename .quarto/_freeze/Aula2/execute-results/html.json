{
  "hash": "e0b03c21004d1f78afd594cd90fe90d4",
  "result": {
    "markdown": "---\ntitle: \"Importação de dados e criação de gráficos simples\"\nformat: html\neditor: visual\nmessage: false\nwarnig: false\neditor_options: \n  chunk_output_type: console\n---\n\n\nNesta aula 2, serão apresentadas formas de se importar (carregar) dados/ planilhas, a partir de diferentes fontes, e como fazer uma análise visual rápida dos dados obtidos. Para utilizar os dados desse pacote é necessário conhecer a função e o que se quer especificar dentro desse pacote. Abaixo seguem alguns meios de importação de dados.\n\n## **Importando dados/ planilhas**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# IMPORTAÇÕES: \nlibrary(ec50estimator)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'ec50estimator' was built under R version 4.3.3\n```\n:::\n\n```{.r .cell-code}\ndf1 <- multi_isolate\n\n#DO EXEL \n\nlibrary(readxl)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'readxl' was built under R version 4.3.3\n```\n:::\n\n```{.r .cell-code}\ndf2 <- read_excel (\"dados-diversos.xlsx\")\n\n#aba \n\ndf21 <- read_excel(\"dados-diversos.xlsx\", \"escala\")\n\n# DE ARQUIVOS CSV \n\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'tidyverse' was built under R version 4.3.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\ndf3 <- read_csv(\"dados-diversos.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 60 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): Irrigation\ndbl (3): rep, day, severity\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\n#planilha GOOGLE - IMPORTAR \n\nlibrary(gsheet)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'gsheet' was built under R version 4.3.3\n```\n:::\n\n```{.r .cell-code}\ndf4 <- gsheet2tbl(\"https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit#gid=983033137\")\n```\n:::\n\n\n## **Uso do `tidyverse` (`ggplot2`) para visualização rápida dos dados**\n\nPara visualizar os dados, é necessário carregar o pacote responsável pela criação dos gráficos. A variável resposta que se deseja observar deve estar no eixo y. Ao abrir a função do `ggplot` abaixo do pipe, é preciso escolher o que ficará no eixo x e no y.\n\nO `ggplot` trabalha em camadas, então, na primeira camada, você define os aspectos estéticos (*aesthetic*), adicionando camadas conforme deseja adicionar ou editar elementos no gráfico. Dentro do `geom_jitter`, você insere os pontos de dispersão e pode ajustar a distância entre eles, \"organizando-os\" no gráfico com o comando `\"width\"`.\n\nQuanto mais simétrico estiver o *box*, mais normal será a distribuição dos dados. Para definir a escala do gráfico, você utiliza a função scale_y_continuous, especificando o limite do intervalo com (limits = c(0, 20)). O número de divisões da escala do gráfico é ajustado com a função n.breaks (= 10).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n  g1<- df4 |> \n  ggplot(aes(trat, comp)) +\n    geom_boxplot(outlier.colour = NA)+\n    geom_jitter(width = 0.05,\n                color =\"black\",\n                shape =2,\n                size =3)+\n    theme_classic() +\n    labs(x = \"tratamento\",\n         y = \"Comprimento (mm)\",\n         title = \"meu primeiro ggplot\", \n         caption = \"fonte: dados diversos\")\n  scale_y_continuous(limits = c (0,20),\n                     n.breaks = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<ScaleContinuousPosition>\n Range:  \n Limits:    0 --   20\n```\n:::\n\n```{.r .cell-code}\n  g1\n```\n\n::: {.cell-output-display}\n![](Aula2_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n\n```{.r .cell-code}\n # ggsave(\"plot1.png\", bg = \"white\")\n```\n:::\n",
    "supporting": [
      "Aula2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}